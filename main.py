import os
import telebot
import feedparser
import requests
from bs4 import BeautifulSoup
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import pytz
import random

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
GROUP_ID = int(os.getenv('GROUP_ID')) if os.getenv('GROUP_ID') else None

bot = telebot.TeleBot(TOKEN)

# –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã
MOTIVATIONAL_QUOTES = [
    "–£—Ç—Ä–æ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Å–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! üí™",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! –î–∞–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è! üèãÔ∏è",
    "–ó–¥–æ—Ä–æ–≤—å–µ ‚Äî –ª—É—á—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è! –î–µ—Ä–∂–∏—Ç–µ —Ä–∏—Ç–º! üåü",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–≥ –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏! –î–∞–≤–∞–π—Ç–µ –≤–ø–µ—Ä–µ–¥! üö∂‚ôÇÔ∏è",
    "–°–∏–ª–∞ –≤–æ–ª–∏ ‚Äî –≤–∞—à –≥–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä! –î–µ—Ä–∂–∏—Ç–µ—Å—å! üí™"
]

# –§—É–Ω–∫—Ü–∏–∏ —Å–ø–∞–º-–∫–æ–Ω—Ç—Ä–æ–ª—è
def is_spam(text):
    spam_words = [
        '–≤ –ª–∏—á–∫—É', '–ª—Å', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–¥–æ—Ö–æ–¥', '—É–¥–∞–ª–µ–Ω–∫–∞',
        '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤', '—Ä–∞–±–æ—Ç–Ω–∏–∫–∏', '–¥–µ–Ω—å–≥', '—Ä–∞–±–æ—Ç', '–ø–∏—à–∏',
        '—Ä–∞–±–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '—Ä–µ–∫–ª–∞–º–∞', '—Å—Å—ã–ª–∫–∞', 'vk.com',
        't.me', '–¥–µ—à–µ–≤–æ', '–Ω–∞–∂–º–∏ —Å—é–¥–∞', '–ø–æ–¥–ø–∏—à–∏—Å—å', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
        '–±–∏—Ç–∫–æ–∏–Ω', '—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è', '–≤–∑–ª–æ–º', '–ø–∞—Ä–æ–ª—å', '–æ–Ω–ª–∞–π–Ω-–∫–∞–∑–∏–Ω–æ',
        '–ø–æ–¥—Ä–∞–±', '—Ä–∞–±–æ—Ç', 'vpn', '–ø—Ä–æ—Ñ–∏–ª', '–ª–∏—á–∫', '–≤–ø–Ω'
    ]
    text_lower = text.lower().replace(" ", "")
    for word in spam_words:
        if word in text_lower:
            return True
    return False

@bot.message_handler(func=lambda message: True, content_types=['text'])
def check_spam(message):
    if message.chat.id == GROUP_ID:
        if is_spam(message.text):
            try:
                bot.delete_message(message.chat.id, message.message_id)
                print(f"–£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
def is_valid_url(url):
    return url and (url.startswith('http://') or url.startswith('https://'))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def get_sports_fashion_news():
    feed = feedparser.parse("https://www.lofficiel.ru/rss.xml")
    articles = []
    for entry in feed.entries[:3]:
        image_url = None
        try:
            page = requests.get(entry.link, timeout=5)
            soup = BeautifulSoup(page.text, 'html.parser')
            og_image = soup.find('meta', property="og:image")
            if og_image and og_image.get('content'):
                image_url = og_image['content']
                if not image_url.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    image_url = None
            if not image_url:
                img_tag = soup.find('img')
                if img_tag and img_tag.get('src'):
                    src = img_tag['src']
                    if src.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
                        image_url = src
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            image_url = None

        if not image_url:
            image_url = "https://via.placeholder.com/800x400?text=Sport+Fashion"

        articles.append({
            'title': entry.title,
            'description': entry.summary,
            'url': entry.link,
            'source': {'name': "L'Officiel Russia"},
            'urlToImage': image_url
        })
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(articles)}")
    return articles

def format_news_post(article):
    return f"<b>{article['title']}</b>\n\n" \
           f"{article['description'][:1000]}..." \
           f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']['name']}"

def can_publish_news():
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    current_hour = now.hour
    return not (22 <= current_hour < 8)

def send_news_to_channel():
    if not can_publish_news():
        print("–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
        return

    articles = get_sports_fashion_news()
    if not articles:
        print("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    article = articles[0]
    image_url = article.get('urlToImage')

    if not is_valid_url(image_url):
        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
        image_url = "https://via.placeholder.com/800x400?text=Sport+Fashion"

    try:
        bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=image_url,
            caption=format_news_post(article),
            parse_mode='HTML'
        )
        print("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def morning_greeting():
    quote = random.choice(MOTIVATIONAL_QUOTES)
    bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû\n\n{quote}",
        parse_mode='HTML'
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
scheduler = BackgroundScheduler(timezone='Europe/Moscow')
scheduler.add_job(send_news_to_channel, 'interval', hours=3)
scheduler.add_job(morning_greeting, CronTrigger(hour=8, minute=0, timezone='Europe/Moscow'))
scheduler.start()
if __name__ == '__main__':
    print("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===")
    morning_greeting()  # –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.polling()
