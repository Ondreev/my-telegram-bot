import os
import telebot
import sqlite3
from datetime import datetime
from flask import Flask, request
from telebot import types
from waitress import serve

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª news.db –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
DATABASE = "news.db"
TOKEN = '7784249517:AAFZdcmFknfTmAf17N2wTifmCoF54BQkeZU'
ADMIN_ID = 530258581
CHANNEL_ID = '@ondreeff'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

bot = telebot.TeleBot(TOKEN)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS news (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT NOT NULL,  -- 'text', 'photo', 'video'
            content TEXT,        -- –¢–µ–∫—Å—Ç –∏–ª–∏ file_id –¥–ª—è –º–µ–¥–∏–∞
            caption TEXT,        -- –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ–¥–∏–∞
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS publish_state (
            last_news_id INTEGER DEFAULT 0
        )
    ''')
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ publish_state –∏–º–µ–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    cursor.execute('INSERT OR IGNORE INTO publish_state (last_news_id) VALUES (0)')
    conn.commit()
    conn.close()

init_db()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π ---
def add_news(news_type, content, caption=None):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO news (type, content, caption) VALUES (?, ?, ?)',
        (news_type, content, caption)
    )
    conn.commit()
    conn.close()

def get_all_news():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM news ORDER BY timestamp DESC')
    news = cursor.fetchall()
    conn.close()
    return news

def delete_news(news_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM news WHERE id = ?', (news_id,))
    conn.commit()
    conn.close()

def get_publish_state():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT last_news_id FROM publish_state LIMIT 1')
    state = cursor.fetchone()[0]
    conn.close()
    return state

def update_publish_state(news_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE publish_state SET last_news_id = ?', (news_id,))
    conn.commit()
    conn.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'),
        types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'),
        types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    )
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    text = message.text
    if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.reply_to(
            message,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:\n"
            "‚ö†Ô∏è –î–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ'"
        )
        bot.register_next_step_handler(msg, process_news_input)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
        show_news_list(message)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_news <–Ω–æ–º–µ—Ä>")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def process_news_input(message):
    if message.content_type == 'text':
        add_news('text', message.text)
        bot.reply_to(message, "‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    elif message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        caption = message.caption or ''
        add_news('photo', file_id, caption)
        bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    elif message.content_type == 'video':
        file_id = message.video.file_id
        caption = message.caption or ''
        add_news('video', file_id, caption)
        bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

def show_news_list(message):
    news = get_all_news()
    if not news:
        bot.reply_to(message, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
        return

    response = "üì∞ –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
    for item in news:
        news_id, news_type, content, caption, timestamp = item
        if news_type == 'photo':
            desc = caption if caption else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            response += f"{news_id}. üì∑ –§–æ—Ç–æ: {desc} ({timestamp})\n"
        elif news_type == 'video':
            desc = caption if caption else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            response += f"{news_id}. üé• –í–∏–¥–µ–æ: {desc} ({timestamp})\n"
        else:
            response += f"{news_id}. üìù {content} ({timestamp})\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['delete_news'])
def handle_delete_news(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        news_id = int(message.text.split()[1])
        delete_news(news_id)
        bot.reply_to(message, f"‚úÖ –ù–æ–≤–æ—Å—Ç—å #{news_id} —É–¥–∞–ª–µ–Ω–∞")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_news <–Ω–æ–º–µ—Ä>")

# --- –í–µ–±—Ö—É–∫ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ---
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_json())
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid request', 400

@app.route('/publish_news')
def publish_news():
    news = get_all_news()
    if not news:
        return "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

    last_id = get_publish_state()
    next_id = (last_id % len(news)) + 1  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É ID
    target_news = None
    for item in news:
        if item[0] == next_id:
            target_news = item
            break

    if not target_news:
        return "–û—à–∏–±–∫–∞: –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    news_type, content, caption = target_news[1], target_news[2], target_news[3]

    try:
        if news_type == 'photo':
            bot.send_photo(CHANNEL_ID, content, caption=caption)
        elif news_type == 'video':
            bot.send_video(CHANNEL_ID, content, caption=caption)
        else:
            bot.send_message(CHANNEL_ID, content)

        update_publish_state(next_id)
        return f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å #{next_id}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook –¥–ª—è Telegram API"

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url='https://my-telegram-bot-vogy.onrender.com/webhook')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL Render
    serve(app, host='0.0.0.0', port=5000)
