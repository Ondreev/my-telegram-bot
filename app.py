import os
import telebot
import json
from datetime import datetime
from flask import Flask, request
from telebot import types
from waitress import serve

app = Flask(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, 'messages.json')
STATE_FILE = os.path.join(BASE_DIR, 'publish_state.json')

TOKEN = '7784249517:AAGdOGzTyeXHXZj9sE9nuKAzUdCx8u8HPHw'
ADMIN_ID = 530258581
CHANNEL_ID = '@ondreeff'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

bot = telebot.TeleBot(TOKEN)

def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {'news': []}

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_state():
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {'last_news_index': -1}

def save_state(state):
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f)

def is_admin(user_id):
    return user_id == ADMIN_ID

@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'),
        types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'),
        types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    )
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    text = message.text
    if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–æ–≤–æ—Å—Ç–∏:")
        bot.register_next_step_handler(msg, add_media_news)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
        list_news(message)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_news <–Ω–æ–º–µ—Ä>")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def add_media_news(message):
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        caption = message.caption or ''
        news_item = {
            'type': 'photo',
            'file_id': file_id,
            'caption': caption,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    elif message.content_type == 'video':
        file_id = message.video.file_id
        caption = message.caption or ''
        news_item = {
            'type': 'video',
            'file_id': file_id,
            'caption': caption,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
        return

    data = load_data()
    data['news'].append(news_item)
    save_data(data)
    bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

def list_news(message):
    data = load_data()
    if not data['news']:
        bot.reply_to(message, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    msg = "–ù–æ–≤–æ—Å—Ç–∏:\n"
    for i, item in enumerate(data['news'], 1):
        t = item.get('type', 'text')
        if t == 'photo':
            desc = item.get('caption', '')
            msg += f"{i}. –§–æ—Ç–æ: {desc} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {item['timestamp']})\n"
        elif t == 'video':
            desc = item.get('caption', '')
            msg += f"{i}. –í–∏–¥–µ–æ: {desc} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {item['timestamp']})\n"
        else:
            msg += f"{i}. {item.get('text', '')} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {item['timestamp']})\n"
    bot.reply_to(message, msg)

@bot.message_handler(commands=['delete_news'])
def delete_news(message):
    if not is_admin(message.from_user.id):
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_news <–Ω–æ–º–µ—Ä>")
        return
    idx = int(parts[1]) - 1
    data = load_data()
    if 0 <= idx < len(data['news']):
        removed = data['news'].pop(idx)
        save_data(data)
        bot.reply_to(message, f"–£–¥–∞–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å #{idx+1}")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

@app.route('/publish_news')
def publish_news():
    data = load_data()
    state = load_state()
    news_list = data.get('news', [])
    if not news_list:
        return "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

    next_index = (state['last_news_index'] + 1) % len(news_list)
    news = news_list[next_index]

    try:
        if news['type'] == 'photo':
            bot.send_photo(CHANNEL_ID, news['file_id'], caption=news.get('caption', ''))
        elif news['type'] == 'video':
            bot.send_video(CHANNEL_ID, news['file_id'], caption=news.get('caption', ''))
        else:
            bot.send_message(CHANNEL_ID, news.get('text', ''))
        state['last_news_index'] = next_index
        save_state(state)
        return f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å #{next_index + 1}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}"

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook –¥–ª—è Telegram API"

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url='https://my-telegram-bot-vogy.onrender.com/webhook')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL Render
    serve(app, host='0.0.0.0', port=5000)
