import requests
import json
from datetime import datetime
from flask import Flask, request
import telebot
from telebot import types
from waitress import serve
import threading
import logging
import functools
import time
from requests.exceptions import RequestException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
YANDEX_TOKEN = "y0__xDPlq0MGOvNNyCmidiHEwSCRFd3yNjmWuWOnADjLKvDPt5B"
DATA_FILE = "bot_data.json"
TOKEN = '7784249517:AAFZdcmFknfTmAf17N2wTifmCoF54BQkeZU'
ADMIN_ID = 530258581
CHANNEL_ID = '@ondreeff'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥

bot = telebot.TeleBot(TOKEN)

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
data_cache = {
    'data': None,
    'timestamp': 0,
    'lock': threading.Lock()
}

def save_to_yadisk(data):
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": f"/{DATA_FILE}", "overwrite": "true"}
    try:
        logger.info("–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        response.raise_for_status()
        upload_url = response.json().get("href")
        if not upload_url:
            logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return False

        put_response = requests.put(upload_url, data=json.dumps(data), timeout=TIMEOUT)
        put_response.raise_for_status()
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
        return True
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False

def load_from_yadisk():
    with data_cache['lock']:
        current_time = time.time()
        if data_cache['data'] and current_time - data_cache['timestamp'] < 300:
            return data_cache['data']

        headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
        url = "https://cloud-api.yandex.net/v1/disk/resources/download"
        params = {"path": f"/{DATA_FILE}"}
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
            response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
            response.raise_for_status()
            download_url = response.json().get("href")
            if not download_url:
                logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return {"news": [], "last_news_id": 0}

            data_response = requests.get(download_url, timeout=TIMEOUT)
            data_response.raise_for_status()
            data = data_response.json()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            data_cache['data'] = data
            data_cache['timestamp'] = current_time

            logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ–≤–æ—Å—Ç–µ–π: {len(data.get('news', []))}")
            return data
        except RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return {"news": [], "last_news_id": 0}
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return {"news": [], "last_news_id": 0}

def async_save_to_yadisk(data):
    def _save():
        try:
            save_to_yadisk(data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    thread = threading.Thread(target=_save)
    thread.start()

def add_news(news_type, content, caption=None):
    data = load_from_yadisk()
    if "news" not in data:
        data["news"] = []
    data["news"].append({
        "type": news_type,
        "content": content,
        "caption": caption,
        "timestamp": datetime.now().isoformat()
    })
    async_save_to_yadisk(data)
    logger.info("–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")

def get_all_news():
    data = load_from_yadisk()
    return data.get("news", [])

def delete_news_by_id(news_id):
    data = load_from_yadisk()
    news_list = data.get("news", [])
    if 1 <= news_id <= len(news_list):
        removed = news_list.pop(news_id - 1)
        data["news"] = news_list
        async_save_to_yadisk(data)
        logger.info(f"–ù–æ–≤–æ—Å—Ç—å #{news_id} —É–¥–∞–ª–µ–Ω–∞")
        return True
    return False

def get_publish_state():
    data = load_from_yadisk()
    return data.get("last_news_id", 0)

def update_publish_state(news_id):
    data = load_from_yadisk()
    data["last_news_id"] = news_id
    async_save_to_yadisk(data)

def is_admin(user_id):
    return user_id == ADMIN_ID

@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'),
        types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'),
        types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    )
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    text = message.text
    if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.reply_to(
            message,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:\n"
            "‚ö†Ô∏è –î–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ'"
        )
        bot.register_next_step_handler(msg, process_news_input)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
        show_news_list(message)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_news <–Ω–æ–º–µ—Ä>")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def process_news_input(message):
    try:
        if message.content_type == 'text':
            add_news('text', message.text)
            bot.reply_to(message, "‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        elif message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            caption = message.caption or ''
            add_news('photo', file_id, caption)
            bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        elif message.content_type == 'video':
            file_id = message.video.file_id
            caption = message.caption or ''
            add_news('video', file_id, caption)
            bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")

def show_news_list(message):
    try:
        news = get_all_news()
        if not news:
            bot.reply_to(message, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
            return

        response = "üì∞ –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
        for idx, item in enumerate(news, 1):
            news_type = item.get("type")
            content = item.get("content")
            caption = item.get("caption")
            timestamp = item.get("timestamp", "")
            if news_type == 'photo':
                desc = caption if caption else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                response += f"{idx}. üì∑ –§–æ—Ç–æ: {desc} ({timestamp})\n"
            elif news_type == 'video':
                desc = caption if caption else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                response += f"{idx}. üé• –í–∏–¥–µ–æ: {desc} ({timestamp})\n"
            else:
                response += f"{idx}. üìù {content} ({timestamp})\n"

        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")

@bot.message_handler(commands=['delete_news'])
def handle_delete_news(message):
    if not is_admin(message.from_user.id):
        return

    try:
        news_id = int(message.text.split()[1])
        if delete_news_by_id(news_id):
            bot.reply_to(message, f"‚úÖ –ù–æ–≤–æ—Å—Ç—å #{news_id} —É–¥–∞–ª–µ–Ω–∞")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_news <–Ω–æ–º–µ—Ä>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_json())
        threading.Thread(target=bot.process_new_updates, args=([update],)).start()
        return '', 200
    return 'Invalid request', 400

@app.route('/publish_news')
def publish_news():
    try:
        news = get_all_news()
        if not news:
            return "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

        last_id = get_publish_state()
        next_id = (last_id % len(news)) + 1

        if next_id > len(news):
            return "–û—à–∏–±–∫–∞: –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        item = news[next_id - 1]
        news_type = item.get("type")
        content = item.get("content")
        caption = item.get("caption")

        if news_type == 'photo':
            bot.send_photo(CHANNEL_ID, content, caption=caption)
        elif news_type == 'video':
            bot.send_video(CHANNEL_ID, content, caption=caption)
        else:
            bot.send_message(CHANNEL_ID, content)

        update_publish_state(next_id)
        return f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å #{next_id}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook –¥–ª—è Telegram API"

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url='https://my-telegram-bot-vogy.onrender.com/webhook')
    serve(app, host='0.0.0.0', port=5000, threads=4)
