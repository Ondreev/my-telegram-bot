import os
import telebot
import json
from datetime import datetime
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

DATA_FILE = 'messages.json'
ADMIN_ID = 530258581  # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'morning': [], 'news': []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ö–æ–º–∞–Ω–¥–∞ /start —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    btn2 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    btn3 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
    btn4 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π')
    btn5 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    btn6 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    text = message.text

    if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_morning_step)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        bot.register_next_step_handler(msg, process_news_step)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π':
        list_morning(message)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
        list_news(message)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_morning <–Ω–æ–º–µ—Ä>")
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_news <–Ω–æ–º–µ—Ä>")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def process_morning_step(message):
    try:
        data = load_data()
        data['morning'].append({
            'text': message.text,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        save_data(data)
        bot.reply_to(message, "‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_news_step(message):
    try:
        data = load_data()
        data['news'].append({
            'text': message.text,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        save_data(data)
        bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def list_morning(message):
    data = load_data()
    if not data['morning']:
        bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    msg = "–°–ø–∏—Å–æ–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
    for idx, item in enumerate(data['morning'], 1):
        msg += f"{idx}. {item['text']} (–î–æ–±–∞–≤–ª–µ–Ω–æ: {item['timestamp']})\n"
    bot.reply_to(message, msg)

def list_news(message):
    data = load_data()
    if not data['news']:
        bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return

    msg = "–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
    for idx, item in enumerate(data['news'], 1):
        msg += f"{idx}. {item['text']} (–î–æ–±–∞–≤–ª–µ–Ω–æ: {item['timestamp']})\n"
    bot.reply_to(message, msg)

# –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['delete_morning'])
def delete_morning(message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_morning <–Ω–æ–º–µ—Ä>")
        return

    try:
        idx = int(args[1]) - 1
        data = load_data()
        if 0 <= idx < len(data['morning']):
            removed = data['morning'].pop(idx)
            save_data(data)
            bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
@bot.message_handler(commands=['delete_news'])
def delete_news(message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_news <–Ω–æ–º–µ—Ä>")
        return

    try:
        idx = int(args[1]) - 1
        data = load_data()
        if 0 <= idx < len(data['news']):
            removed = data['news'].pop(idx)
            save_data(data)
            bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    print("–ë–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
