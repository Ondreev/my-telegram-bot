import os
import telebot
import json
from datetime import datetime
from telebot import types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

ADMIN_ID = os.environ.get('ADMIN_ID')
if not ADMIN_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID")
try:
    ADMIN_ID = int(ADMIN_ID)
except ValueError:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

DATA_FILE = 'messages.json'

bot = telebot.TeleBot(TOKEN)

def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {'morning': [], 'news': []}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    return user_id == ADMIN_ID

@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'),
        types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'),
        types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'),
        types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    text = message.text
    if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, add_morning)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        bot.register_next_step_handler(msg, add_news)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π':
        list_morning(message)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π':
        list_news(message)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_morning <–Ω–æ–º–µ—Ä>")
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_news <–Ω–æ–º–µ—Ä>")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def add_morning(message):
    data = load_data()
    data['morning'].append({'text': message.text, 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
    save_data(data)
    bot.reply_to(message, "‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

def add_news(message):
    data = load_data()
    data['news'].append({'text': message.text, 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
    save_data(data)
    bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")

def list_morning(message):
    data = load_data()
    if not data['morning']:
        bot.reply_to(message, "–ù–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    msg = "–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    for i, item in enumerate(data['morning'], 1):
        msg += f"{i}. {item['text']} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {item['timestamp']})\n"
    bot.reply_to(message, msg)

def list_news(message):
    data = load_data()
    if not data['news']:
        bot.reply_to(message, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    msg = "–ù–æ–≤–æ—Å—Ç–∏:\n"
    for i, item in enumerate(data['news'], 1):
        msg += f"{i}. {item['text']} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {item['timestamp']})\n"
    bot.reply_to(message, msg)

@bot.message_handler(commands=['delete_morning'])
def delete_morning(message):
    if not is_admin(message.from_user.id):
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_morning <–Ω–æ–º–µ—Ä>")
        return
    idx = int(parts[1]) - 1
    data = load_data()
    if 0 <= idx < len(data['morning']):
        removed = data['morning'].pop(idx)
        save_data(data)
        bot.reply_to(message, f"–£–¥–∞–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed['text']}")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")

@bot.message_handler(commands=['delete_news'])
def delete_news(message):
    if not is_admin(message.from_user.id):
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_news <–Ω–æ–º–µ—Ä>")
        return
    idx = int(parts[1]) - 1
    data = load_data()
    if 0 <= idx < len(data['news']):
        removed = data['news'].pop(idx)
        save_data(data)
        bot.reply_to(message, f"–£–¥–∞–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {removed['text']}")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")

if __name__ == '__main__':
    bot.polling(none_stop=True)
